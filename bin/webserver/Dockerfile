FROM php:7.4.0-apache-buster

# Surpresses debconf complaints of trying to install apt packages interactively
# https://github.com/moby/moby/issues/4032#issuecomment-192327844
 
ARG DEBIAN_FRONTEND=noninteractive

# Update
RUN apt-get -y update --fix-missing && \
    apt-get upgrade -y && \
    apt-get --no-install-recommends install -y apt-utils && \
    rm -rf /var/lib/apt/lists/*


# Install useful tools and install important libaries
RUN apt-get -y update && \
    apt-get -y --no-install-recommends install nano wget dialog libsqlite3-dev libsqlite3-0 && \
    apt-get -y --no-install-recommends install default-mysql-client zlib1g-dev libzip-dev libicu-dev && \
    apt-get -y --no-install-recommends install --fix-missing apt-utils build-essential git curl libonig-dev && \ 
    apt-get -y --no-install-recommends install --fix-missing libcurl4 libcurl4-openssl-dev zip openssl && \
    rm -rf /var/lib/apt/lists/* && \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Install xdebug
RUN pecl install xdebug-2.8.0 && \
    docker-php-ext-enable xdebug

# Install redis
RUN pecl install redis-5.1.1 && \
    docker-php-ext-enable redis

# Other PHP7 Extensions

RUN docker-php-ext-install pdo_mysql && \
    docker-php-ext-install pdo_sqlite && \
    docker-php-ext-install mysqli && \
    docker-php-ext-install curl && \
    docker-php-ext-install tokenizer && \
    docker-php-ext-install json && \
    docker-php-ext-install zip && \
    docker-php-ext-install -j$(nproc) intl && \
    docker-php-ext-install mbstring && \
    docker-php-ext-install gettext

# Install Freetype 
RUN apt-get -y update && \
    apt-get --no-install-recommends install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev && \
    rm -rf /var/lib/apt/lists/* && \
    docker-php-ext-configure gd

# Enable apache modules
RUN a2enmod rewrite headers

# Cleanup
RUN rm -rf /usr/src/*

##CUSTOM
RUN apt-get update && \
    apt-get install -y --no-install-recommends apt-utils && \
    apt-get install -y sudo && \
    rm -rf /var/lib/apt/lists/*

RUN curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - && \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

RUN apt-get update

RUN apt-get install -y --fix-missing \
    software-properties-common \
    locales \
    locales-all \
    gpg-agent \
    nodejs \
    apt-utils \
    build-essential \
    git \
    curl \
    # libcurl4 \
    # libcurl4-openssl-dev \
    zip \
    zlib1g-dev \
    libicu-dev \
    xclip \ 
    nano \
    dialog


#L18N
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8
RUN locale-gen en_GB.UTF-8
RUN LANG=en_GB.UTF-8

# RUN add-apt-repository -y ppa:ondrej/php
# RUN apt-get update
# RUN apt-get install -y \
#   php7.3-sybase \
#   php7.3-pdo-dblib 


#git user
RUN git config --global user.email "dietergribnitz@gmail.com"
RUN git config --global user.name "Dieter Gribnitz"

RUN echo 'string'

# #apache user
ARG APACHE_RUN_USER=${APACHE_RUN_USER}
ENV APACHE_RUN_USER=${APACHE_RUN_USER}

# #apache group
ARG APACHE_RUN_GROUP=${APACHE_RUN_GROUP}
ENV APACHE_RUN_GROUP=${APACHE_RUN_GROUP}

# # #active user
# # ARG USER=server
# # ENV USER=${USER}
# # #active group
# # ARG GROUP=server
# # ENV GROUP=${GROUP}
# # RUN adduser --disabled-password --gecos '' $USER

# ENV APACHE_RUN_USER ${USER}

ARG USER=${USER}
ENV USER=${USER}
ARG GROUP=${GROUP}
ENV GROUP=${GROUP}
# RUN adduser --uid 1000 --disabled-password --gecos '' $USER
RUN adduser --uid 1000 --gecos "" --disabled-password ${USER} \
             && chown -R "$APACHE_RUN_USER:$APACHE_RUN_GROUP" /var/lock/apache2 /var/run/apache2



COPY ./bin /usr/local/sbin
RUN mkdir /etc/apache2/ssl

##</autogenerated>##



ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true

#SSL
RUN a2enmod ssl
RUN a2enmod http2
RUN cd /etc/apache2/ssl && ssl-generate-certs
RUN cd /etc/apache2/ssl && ssl-generate-certs utility
# RUN chown $USER:$GROUP /var/www/html
RUN mkdir /etc/letsencrypt
RUN mkdir /etc/letsencrypt/live

RUN echo "ServerName localhost" >> /etc/apache2/apache2.conf

RUN apachectl restart

#DEVMODE
RUN chown $USER:$GROUP /home/$USER
RUN mkdir /home/$USER/bin
#COPY ./var/bin /home/$USER/bin

RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

RUN sudo apt-get update

RUN sudo apt-get -y install \
    yarn \
    libpam0g-dev \
    libkrb5-dev \
    g++ \
    gyp \
    libcairo2-dev \
    libjpeg-dev \
    libgif-dev \
    # python3.7-dev \
    xz-utils \
    openssh


RUN echo "PATH=\"/home/$USER/bin:\$PATH\"" >> ~/.bashrc
RUN echo "PATH=\"/home/$USER/bin:\$PATH\"" >> /home/$USER/.bashrc

RUN rm -rf /var/lib/apt/lists/*;

# RUN chown $USER:$GROUP /var/log/apache2
# RUN chown $USER:$GROUP /var/www/html
RUN chown $USER:$GROUP /etc/apache2/sites-enabled
# RUN chown $USER:$GROUP /var/log/apache2
# RUN chown $USER:$GROUP /home/$USER
# RUN chown $USER:$GROUP /etc/default/locale
# RUN chown $USER:$GROUP /var/www/utility
# RUN chown $USER:$GROUP /usr/local/etc/php/php.ini
# RUN chown $USER:$GROUP /etc/letsencrypt/live/${DOMAIN}/fullchain.pem
# RUN chown $USER:$GROUP /etc/letsencrypt/live/${DOMAIN}/privkey.pem
RUN chown $USER:$GROUP /var/log/apache2 
RUN chown $USER:$GROUP /etc/apache2/ssl/localhost.crt
RUN chown $USER:$GROUP /etc/apache2/ssl/localhost.key

# USER splice:splice

# RUN /etc/init.d/apache2 stop
# # #apache user
# ARG APACHE_RUN_USER=${USER}
# ENV APACHE_RUN_USER=${USER}

# # #apache group
# ARG APACHE_RUN_GROUP=${GROUP}
# ENV APACHE_RUN_GROUP=${GROUP}
# RUN chown $USER:$GROUP /var/log/apache2
# RUN /etc/init.d/apache2 start

RUN ps aux | egrep '(apache|httpd)'

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
COPY apache2-foreground /usr/local/bin/
WORKDIR /var/www/html

EXPOSE 80 443 8443
CMD ["apache2-foreground"]